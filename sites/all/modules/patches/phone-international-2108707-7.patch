diff --git a/include/phone.int.inc b/include/phone.int.inc
index 68db303..c527a5d 100644
--- a/include/phone.int.inc
+++ b/include/phone.int.inc
@@ -3,7 +3,7 @@
 function phone_int_metadata() {
   // These strings are translated using t() on output.
   return array(
-    'error' => '"%value" is not a valid Italian phone number<br>Italian phone numbers should only ...',
+    'error' => '"%value" is not a valid international phone number',
   );
 }
 
@@ -37,33 +37,40 @@ function valid_int_phone_number($phonenumber) {
     $error = t('Invalid international phone number: Phone number contains invalid characters; only allowed characters are numbers and punctuation.');
     return FALSE;
   }
-  // Extract country code and see if it's correct:
-  preg_match('/^\+(\d+)/', $phonenumber, $matches);
-  $cc = $matches[1];
-  if (strlen($cc) > 3) {
-    $error = array(
-      t('Invalid international phone number: Country code "+%cc" is too long; valid country codes are three digits or less.'),
-      array('%cc' => $cc)
-    );
+
+  if ($phonenumber[0] !== '+') {
     return FALSE;
   }
-  
-  //drupal_set_message('langue cc = ' . $cc, 'error');
+  // Check for correct country code.
+  // TODO: Fix problems with shared country codes. For instance, $countrycode is
+  //       never 'ca' (but always 'us'). One of the following things needs done:
+  //       - all countries sharing the same area need to be validated in the
+  //         same .inc file (e.g. phone.1.inc or phone.61.inc)
+  //       - there will need to be a separate 'pre-validate' function that
+  //         determines which country a phone number belongs to.
+  $codes = array_flip(array_unique(phone_country_codes()));
+  foreach (array(1, 2, 3) as $length) {
+    $nr_start = substr($phonenumber, 1, $length);
+    if (isset($codes[$nr_start])) {
+      $countrycode = $codes[$nr_start];
+      break;
+    }
+  }
 
   // TODO: Check if parentheses/brackets add up.
-  // TODO: Validate the number against the country rules.
   // For now, validate only against a limited number of countries.
 
-  $countrycode = phone_country_code_convert($cc);
-  //drupal_set_message('langue countrycode = ' . $countrycode, 'error');
   if (!empty($countrycode)) {
       $valid_phone_function = 'valid_'. $countrycode . '_phone_number';
-      module_load_include('inc', 'phone', 'phone.'. $countrycode);
+      module_load_include('inc', 'phone', 'include/phone.' . $countrycode);
       if (function_exists($valid_phone_function)) {
         return $valid_phone_function($phonenumber, $field);
       }
       else {
-      	return TRUE; 
+        // Check for any illegal dialing codes, which the 'format' call would
+        // strip.
+        $check = str_replace(array('.', '(', ')', '[', ']', '-', '+', ' '), '', format_int_phone_number($phonenumber));
+        return $check == $base_phonenumber;
       }
   }
   
@@ -134,221 +141,227 @@ function _normalize_country_code($phonenumber, $field = array()) {
  *   Converted country code
  */
 function phone_country_code_convert($code, $input_type = 'digits') {
-   static $codes;
-   if (!$codes) {
-    $codes = array(    
-      '1' => 'ca',
-      '1' => 'us',
-      '7' => 'ru',
-      '20' => 'eg',
-      '27' => 'za',
-      '30' => 'gr',
-      '31' => 'nl',
-      '32' => 'be',
-      '33' => 'fr',
-      '34' => 'es',
-      '36' => 'hu',
-      '39' => 'it',
-      '39' => 'va',
-      '40' => 'ro',
-      '41' => 'ch',
-      '43' => 'at',
-      '44' => 'gb',
-      '45' => 'dk',
-      '46' => 'se',
-      '47' => 'no',
-      '48' => 'pl',
-      '49' => 'de', 
-      '51' => 'pe',
-      '52' => 'mx',
-      '53' => 'cu',
-      '54' => 'ar',
-      '55' => 'br',
-      '56' => 'cl',
-      '57' => 'co',
-      '58' => 've',    
-      '60' => 'my',
-      '61' => 'au',
-      '61' => 'cc',
-      '61' => 'cx',
-      '62' => 'id',
-      '63' => 'ph',
-      '64' => 'nz',
-      '65' => 'sg',
-      '66' => 'th',
-      '81' => 'jp',
-      '82' => 'kr',
-      '84' => 'vn',
-      '86' => 'cn',
-      '90' => 'tr',
-      '91' => 'in',
-      '92' => 'pk',
-      '93' => 'af',
-      '94' => 'lk',
-      '95' => 'mm',
-      '98' => 'ir', 
-      '212' => 'ma',
-      '213' => 'dz',
-      '216' => 'tn',
-      '218' => 'ly',
-      '220' => 'gm',
-      '221' => 'sn',
-      '222' => 'mr',
-      '223' => 'ml',
-      '224' => 'gn',
-      '225' => 'ci',
-      '226' => 'bf',
-      '227' => 'ne',
-      '228' => 'tg',
-      '229' => 'bj',
-      '230' => 'mu',
-      '231' => 'lr',
-      '232' => 'sl',
-      '233' => 'gh',
-      '234' => 'ng',
-      '235' => 'td',
-      '236' => 'cf',
-      '237' => 'cm',
-      '238' => 'cv',
-      '239' => 'st',
-      '240' => 'gq',
-      '241' => 'ga',
-      '242' => 'cg',
-      '243' => 'cd',
-      '244' => 'ao',
-      '245' => 'gw',
-      '246' => 'io',
-      '248' => 'sc',
-      '249' => 'sd',
-      '250' => 'rw',
-      '251' => 'et',
-      '252' => 'so',
-      '253' => 'dj',
-      '254' => 'ke',
-      '255' => 'tz',
-      '256' => 'ug',
-      '257' => 'bi',
-      '258' => 'mz',
-      '260' => 'zm',
-      '261' => 'mg',
-      '263' => 'zw',
-      '264' => 'na',
-      '265' => 'mw',
-      '266' => 'ls',
-      '267' => 'bw',
-      '268' => 'sz',
-      '269' => 'km',
-      '269' => 'yt',
-      '290' => 'sh',
-      '291' => 'er',
-      '297' => 'aw',
-      '298' => 'fo',
-      '299' => 'gl',
-      '350' => 'gi',
-      '351' => 'pt',
-      '352' => 'lu',
-      '353' => 'ie',
-      '354' => 'is',
-      '355' => 'al',
-      '356' => 'mt',
-      '357' => 'cy',
-      '358' => 'fi',
-      '359' => 'bg',
-      '370' => 'lt',
-      '371' => 'lv',
-      '372' => 'ee',
-      '373' => 'md',
-      '374' => 'am',
-      '375' => 'by',
-      '376' => 'ad',
-      '377' => 'mc',
-      '378' => 'sm',
-      '380' => 'ua',
-      '381' => 'rs',
-      '382' => 'me',
-      '385' => 'hr',
-      '386' => 'si',
-      '387' => 'ba',
-      '389' => 'mk',   
-      '420' => 'cz',
-      '421' => 'sk',
-      '423' => 'li',
-      '500' => 'fk',
-      '501' => 'bz',
-      '502' => 'gt',
-      '503' => 'sv',
-      '504' => 'hn',
-      '505' => 'ni',
-      '506' => 'cr',
-      '507' => 'pa',
-      '508' => 'pm',
-      '509' => 'ht',
-      '590' => 'gp',
-      '591' => 'bo',
-      '592' => 'gy',
-      '593' => 'ec',
-      '594' => 'gf',
-      '595' => 'py',
-      '596' => 'mq',
-      '597' => 'sr',
-      '598' => 'uy',
-      '599' => 'an',
-      '670' => 'tp',
-      '672' => 'nf',
-      '673' => 'bn',
-      '674' => 'nr',
-      '675' => 'pg',
-      '676' => 'to',
-      '677' => 'sb',
-      '678' => 'vu',
-      '679' => 'fj',
-      '680' => 'pw',
-      '681' => 'wf',
-      '682' => 'ck',
-      '683' => 'nu',
-      '686' => 'ki',
-      '687' => 'nc',
-      '688' => 'tv',
-      '689' => 'pf',
-      '690' => 'tk',
-      '691' => 'fm',
-      '692' => 'mh', 
-      '850' => 'kp',
-      '852' => 'hk',
-      '853' => 'mo',
-      '855' => 'kh',
-      '856' => 'la',
-      '880' => 'bd',
-      '886' => 'tw', 
-      '960' => 'mv',
-      '961' => 'lb',
-      '962' => 'jo',
-      '963' => 'sy',
-      '964' => 'iq',
-      '965' => 'kw',
-      '966' => 'sa',
-      '967' => 'ye',
-      '968' => 'om',
-      '970' => 'ps',
-      '971' => 'ae',
-      '972' => 'il',
-      '973' => 'bh',
-      '974' => 'qa',
-      '975' => 'bt',
-      '976' => 'mn',
-      '977' => 'np',
-      '992' => 'tj',
-      '993' => 'tm',
-      '994' => 'az',
-      '995' => 'ge',
-      '996' => 'kg',
-      '998' => 'uz',      
-    );
-   }
+  $codes = phone_country_codes();
 
-  if ($input_type == 'alpha') {
-    $codes = array_flip($codes);
+  if ($input_type == 'digits') {
+    $codes = array_flip(array_unique($codes));
   }
   return isset($codes[$code]) ? $codes[$code] : FALSE;
 }
 
+/**
+ * Returns an array of country codes and 2-letter abbreviations for each.
+ *
+ * @return
+ *   An array of country codes.
+ */
+function phone_country_codes() {
+  return array(
+    'us' => '1',
+    'ca' => '1',
+    'ru' => '7',
+    'eg' => '20',
+    'za' => '27',
+    'gr' => '30',
+    'nl' => '31',
+    'be' => '32',
+    'fr' => '33',
+    'es' => '34',
+    'hu' => '36',
+    'it' => '39',
+    'va' => '39',
+    'ro' => '40',
+    'ch' => '41',
+    'at' => '43',
+    'gb' => '44',
+    'dk' => '45',
+    'se' => '46',
+    'no' => '47',
+    'pl' => '48',
+    'de' => '49',
+    'pe' => '51',
+    'mx' => '52',
+    'cu' => '53',
+    'ar' => '54',
+    'br' => '55',
+    'cl' => '56',
+    'co' => '57',
+    've' => '58',
+    'my' => '60',
+    'au' => '61',
+    'cc' => '61',
+    'cx' => '61',
+    'id' => '62',
+    'ph' => '63',
+    'nz' => '64',
+    'sg' => '65',
+    'th' => '66',
+    'jp' => '81',
+    'kr' => '82',
+    'vn' => '84',
+    'cn' => '86',
+    'tr' => '90',
+    'in' => '91',
+    'pk' => '92',
+    'af' => '93',
+    'lk' => '94',
+    'mm' => '95',
+    'ir' => '98',
+    'ma' => '212',
+    'dz' => '213',
+    'tn' => '216',
+    'ly' => '218',
+    'gm' => '220',
+    'sn' => '221',
+    'mr' => '222',
+    'ml' => '223',
+    'gn' => '224',
+    'ci' => '225',
+    'bf' => '226',
+    'ne' => '227',
+    'tg' => '228',
+    'bj' => '229',
+    'mu' => '230',
+    'lr' => '231',
+    'sl' => '232',
+    'gh' => '233',
+    'ng' => '234',
+    'td' => '235',
+    'cf' => '236',
+    'cm' => '237',
+    'cv' => '238',
+    'st' => '239',
+    'gq' => '240',
+    'ga' => '241',
+    'cg' => '242',
+    'cd' => '243',
+    'ao' => '244',
+    'gw' => '245',
+    'io' => '246',
+    'sc' => '248',
+    'sd' => '249',
+    'rw' => '250',
+    'et' => '251',
+    'so' => '252',
+    'dj' => '253',
+    'ke' => '254',
+    'tz' => '255',
+    'ug' => '256',
+    'bi' => '257',
+    'mz' => '258',
+    'zm' => '260',
+    'mg' => '261',
+    'zw' => '263',
+    'na' => '264',
+    'mw' => '265',
+    'ls' => '266',
+    'bw' => '267',
+    'sz' => '268',
+    'km' => '269',
+    'yt' => '269',
+    'sh' => '290',
+    'er' => '291',
+    'aw' => '297',
+    'fo' => '298',
+    'gl' => '299',
+    'gi' => '350',
+    'pt' => '351',
+    'lu' => '352',
+    'ie' => '353',
+    'is' => '354',
+    'al' => '355',
+    'mt' => '356',
+    'cy' => '357',
+    'fi' => '358',
+    'bg' => '359',
+    'lt' => '370',
+    'lv' => '371',
+    'ee' => '372',
+    'md' => '373',
+    'am' => '374',
+    'by' => '375',
+    'ad' => '376',
+    'mc' => '377',
+    'sm' => '378',
+    'ua' => '380',
+    'rs' => '381',
+    'me' => '382',
+    'hr' => '385',
+    'si' => '386',
+    'ba' => '387',
+    'mk' => '389',
+    'cz' => '420',
+    'sk' => '421',
+    'li' => '423',
+    'fk' => '500',
+    'bz' => '501',
+    'gt' => '502',
+    'sv' => '503',
+    'hn' => '504',
+    'ni' => '505',
+    'cr' => '506',
+    'pa' => '507',
+    'pm' => '508',
+    'ht' => '509',
+    'gp' => '590',
+    'bo' => '591',
+    'gy' => '592',
+    'ec' => '593',
+    'gf' => '594',
+    'py' => '595',
+    'mq' => '596',
+    'sr' => '597',
+    'uy' => '598',
+    'an' => '599',
+    'tp' => '670',
+    'nf' => '672',
+    'bn' => '673',
+    'nr' => '674',
+    'pg' => '675',
+    'to' => '676',
+    'sb' => '677',
+    'vu' => '678',
+    'fj' => '679',
+    'pw' => '680',
+    'wf' => '681',
+    'ck' => '682',
+    'nu' => '683',
+    'ki' => '686',
+    'nc' => '687',
+    'tv' => '688',
+    'pf' => '689',
+    'tk' => '690',
+    'fm' => '691',
+    'mh' => '692',
+    'kp' => '850',
+    'hk' => '852',
+    'mo' => '853',
+    'kh' => '855',
+    'la' => '856',
+    'bd' => '880',
+    'tw' => '886',
+    'mv' => '960',
+    'lb' => '961',
+    'jo' => '962',
+    'sy' => '963',
+    'iq' => '964',
+    'kw' => '965',
+    'sa' => '966',
+    'ye' => '967',
+    'om' => '968',
+    'ps' => '970',
+    'ae' => '971',
+    'il' => '972',
+    'bh' => '973',
+    'qa' => '974',
+    'bt' => '975',
+    'mn' => '976',
+    'np' => '977',
+    'tj' => '992',
+    'tm' => '993',
+    'az' => '994',
+    'ge' => '995',
+    'kg' => '996',
+    'uz' => '998',
+  );
+}
