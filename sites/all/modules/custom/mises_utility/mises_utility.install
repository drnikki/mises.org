<?php
/**
* Delete unused content types.
*
* Adapted from node_type_delete_confirm_submit().
*/
function mises_utility_update_7001() {
  $types = array(
    'document',
  );
  foreach($types as $type) {
    node_type_delete($type);
    $t_args = array('%name' => $type);
    drupal_set_message(t('The content type %name has been deleted.', $t_args));
    watchdog('node', 'Deleted content type %name.', $t_args, WATCHDOG_NOTICE);
  }

  node_types_rebuild();
  menu_rebuild();
}

/**
* Delete unused Legacy Book content types.
*
*/
function mises_utility_update_7002() {
  $types = array(
    'legacy_book',
  );
  foreach($types as $type) {
    node_type_delete($type);
    $t_args = array('%name' => $type);
    drupal_set_message(t('The content type %name has been deleted.', $t_args));
    watchdog('node', 'Deleted content type %name.', $t_args, WATCHDOG_NOTICE);
  }

  node_types_rebuild();
  menu_rebuild();
}

/**
* Disable and uninstall unneeded module.
*
*/
function mises_utility_update_7003() {
  
  if (module_exists('page_title')) {
    module_disable(array('page_title'));
    drupal_uninstall_modules(array('page_title'));
  }
}

/**
* Disable and uninstall unneeded module.
*
*/
function mises_utility_update_7004() {
  
  if (module_exists('default_social_image')) {
    module_disable(array('default_social_image'));
    drupal_uninstall_modules(array('default_social_image'));
  }
}


/**
* Check "old blog" flag for all blogs created prior 2016.08.01
*/
function mises_utility_update_7005() {
  $type = 'blog';
  $created_limit = '2015:08:01 00:00:00';
  $created_limit_ts = strtotime($created_limit);
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_is_old_blog_content', 'f', 'n.nid = f.entity_id');
  $query
    ->fields('n', array('nid'))
    ->fields('n', array('created'))
    ->condition('n.type', $type)
    ->condition('n.created', $created_limit_ts, '<')
    ->orderBy('n.created', 'DESC')
    ->addTag('node_access');

  $result = $query->execute();
  $old_blog_nids = array();
  foreach ($result as $record) {
    $old_blog_nids[] = $record->nid;
  }

  // loading and using node_save to leverage it creating the table row for us, along with
  // all needed dependencies
  foreach($old_blog_nids as $nid) {
    $node = node_load($nid);
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $node_wrapper->field_is_old_blog_content->set(1);
    $node_wrapper->save();
  }
}
