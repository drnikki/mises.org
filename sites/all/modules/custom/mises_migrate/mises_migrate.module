<?php
/**
 * @file
 * Drupal needs this blank file.
 */
function mises_migrate_boot() {
}

function mises_migrate_init() {

}


abstract class MisesMigration extends Migration {
    protected $db;
    public function __construct($arguments) {
      parent::__construct($arguments);
      $this->db = Database::getConnection('default', 'for_migration');
      $this->description = t('Wine producers of the world');
      $this->dependencies = array();
    }
}


class DailyArticlesMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('DailyArticles', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'ArticleId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'Title');
    $this->addFieldMapping('body', 'ArticleText');
    $this->addFieldMapping('field_published_date', 'DatePosted');
  }
}


class DocumentAuthorsMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('DocumentAuthors', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationTerm('authors');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'AuthorId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('name', 'name');
    $this->addFieldMapping('field_first_name', 'AuthorFirst');
    $this->addFieldMapping('field_middle_name', 'AuthorMiddle');
    $this->addFieldMapping('field_last_name', 'AuthorLast');
    $this->addFieldMapping('field_biography', 'BioText');
    $this->addFieldMapping('field_born', 'Born');
    $this->addFieldMapping('field_died', 'Died');
        $this->addFieldMapping('field_headshot', 'Photo');
    // Indicate that we want each file to maintain its name, replacing any
    // previous file of the same name (as opposed to being renamed to avoid
    // collisions, which is the default).
    $this->addFieldMapping('field_headshot:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_headshot:alt', 'name');
    $this->addFieldMapping('field_headshot:title', 'name');
  }

  public function prepareRow($row) {
    // process the full name
    $name = array(
      $row->AuthorFirst,
      $row->AuthorMiddle,
      $row->AuthorLast,
    );
    foreach($name as $k => $v) {
      if($v) {
        $name[$k] = trim($v);
      }
      else {
        unset($name[$k]);
      }
    }
    $row->name = implode($name, ' ');
    return $row;
  }

  public function prepare($row, $node) {

  }
}


class DocumentSubjectsMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('DocumentSubjects', 'd')
      ->fields('d')
      ->where('d.Visible=1');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationTerm('subject');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'SubjectId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('name', 'Subject');
    $this->addFieldMapping('field_short_name', 'ShortSubject');
    $this->addFieldMapping('field_subject_image', 'image');
    // Indicate that we want each file to maintain its name, replacing any
    // previous file of the same name (as opposed to being renamed to avoid
    // collisions, which is the default).
    $this->addFieldMapping('field_subject_image:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_subject_image:alt', 'Subject');
    $this->addFieldMapping('field_subject_image:title', 'Subject');
  }
  public function prepareRow($row) {
    $row->image = 'http://mises.org'.$row->Photo;
    return $row;
  }
  public function prepare($row, $node) {

  }
}


class DocumentMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('Documents', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'DocumentId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'Title');
    $this->addFieldMapping('body', 'Description');
    $this->addFieldMapping('body:format')->defaultValue('full_html');
    $this->addFieldMapping('field_published_date', 'DatePosted');
    $this->addFieldMapping('field_author', 'authors')
        ->separator('|')
         ->sourceMigration('DocumentAuthors');
    $this->addFieldMapping('field_subject', 'subjects')
         ->separator('|')
         ->sourceMigration('DocumentSubjects');
    $this->addFieldMapping('field_subject:source_type')
         ->defaultValue('tid');
    $this->addFieldMapping('uid')->defaultValue(1);
    $this->addFieldMapping('field_image_attachment', 'image');
    // Indicate that we want each file to maintain its name, replacing any
    // previous file of the same name (as opposed to being renamed to avoid
    // collisions, which is the default).
    $this->addFieldMapping('field_image_attachment:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_image_attachment:alt', 'Title');
    $this->addFieldMapping('field_image_attachment:title', 'Title');
  }


  public function prepareRow($row) {
    $row->subjects = array();
    $query = $this->db->query("SELECT SubjectID FROM DocumentSubjectLink WHERE DocumentId = $row->DocumentId");
    while($result = $query->fetch()) {
      $row->subjects[] = $result->SubjectID;
    }
    $row->subjects = implode($row->subjects,'|');
    $row->image = 'http://mises.org'.$row->CoverImageURL;
    $row->authors = $row->Author1.'|'.$row->Author2;
    //$row->image = 'http://mises.org'.$row->Photo;
    return $row;
  }
  public function prepare($row, $node) {

  }
}


