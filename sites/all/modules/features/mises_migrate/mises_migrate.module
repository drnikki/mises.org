<?php


function mises_migrate_init() {
  require_once('mises.media.inc');
  require_once('extras.inc');
  mises_migrate_redirect();
}


function mises_migrate_redirect() {
    switch(arg(0)) {
      case 'daily':
        if(is_numeric(arg(1))) {
          $id = arg(1);
          $type = 'daily';
        }
        else if(arg(1) == 'author' && is_numeric(arg(2))) {
          $id = arg(2);
          $type = 'Author';
        }
        break;
      case 'media':
      case 'document':
        if(is_numeric(arg(1))) {
          $id = arg(1);
          $type = 'document';
        }
        else if(arg(1) == 'author' && is_numeric(arg(2))) {
          $id = arg(2);
          $type = 'Author';
        }
        break;
      case 'Literature':
        if(arg(1) == 'Author' && is_numeric(arg(2))) {
          $id = arg(2);
          $type = 'Author';
        }
        beak;
  }
  if($id && $type) {
    $query = db_query("SELECT nid FROM {mises_migrate_url_map} WHERE old_type = :old_type AND old_id = :old_id", array(
      'old_id' => $id,
      'old_type' => $type
    ));
    if($result = $query->fetch()) {
      drupal_goto('node/'.$result->nid);
    }
  }
}


abstract class MisesMigration extends Migration {
    protected $db;
    public function __construct($arguments) {
      parent::__construct($arguments);
      $this->db = Database::getConnection('default', 'for_migration');
      $this->description = t('Wine producers of the world');
      $this->dependencies = array();
    }
    public function mapTags(&$row) {
      $mapper = new MisesTagMapper($row);
      $terms = $mapper->getTerms();
      $row->tags = $terms['tag'];
      $row->field_topics = $terms['field_topics'];
      $row->field_austrian_school = $terms['field_austrian_school'];
    }
    function insert_mapping_url($nid, $old_id, $old_type, $title) {
      $result = db_query("SELECT * FROM {mises_migrate_url_map} WHERE nid = :nid", array(
        'nid' => $nid
      ));
      $new_url = drupal_get_path_alias('node/'.$nid);
      $title = str_replace(array('-',':','?','"', "'", ",", '!', '(',')','%','$'),'', $title);
      $title = str_replace(' ', '-', $title);
      $title = str_replace("&", 'amp', $title);
      $old_url = 'http://www.mises.org/'.$old_type.'/'.$old_id.'/'.$title;
      $record = array(
        'nid' => $nid, 
        'old_id' => $old_id, 
        'old_type' => $old_type, 
        'old_url' => $old_url,
        'new_url' => $new_url
      );
      if($result->fetch()) {
        drupal_write_record('mises_migrate_url_map', $record, 'nid');
      }
      else {
        drupal_write_record('mises_migrate_url_map', $record);
      }
    }
    public function getFullName($row) {
      $name = array(
        $row->AuthorFirst,
        $row->AuthorMiddle,
        $row->AuthorLast,
      );
      foreach($name as $k => $v) {
        if($v) {
          $name[$k] = trim($v);
        }
        else {
          unset($name[$k]);
        }
      }
      return implode($name, ' ');
    }
}


class BiographyMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('biography', 'r')
      ->fields('r');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'AuthorId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->addFieldMapping('field_published_date', 'CreateDate');
    $this->addFieldMapping('created', 'CreateDate');
    $this->addFieldMapping('title', 'AuthorFirst');
    $this->addFieldMapping('body', 'BioText');
    $this->addFieldMapping('body:format')->defaultValue('full_html');
    $this->addFieldMapping('field_author_1', 'author');
    $this->addFieldMapping('field_library_item_tree')->defaultValue(array('Biography'));
    $this->addFieldMapping('status')->defaultValue(1);
  }
  public function prepareRow($row) {
    $query = db_query("SELECT nid FROM {node} WHERE type = 'person_profile' AND title = '$row->AuthorFirst'");
    if($result = $query->fetch()) {
      $author = $result->nid;
    }
  }
}


class ReviewMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('misesreview', 'r')
      ->fields('r');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'control' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('field_published_date', 'CreateDate');
    $this->addFieldMapping('created', 'CreateDate');
    $this->addFieldMapping('changed', 'CreateDate');
    $this->addFieldMapping('field_media_type')->defaultValue('Review');
    $this->addFieldMapping('title', 'title');
    $this->addFieldMapping('body', 'body');
    $this->addFieldMapping('body:format')->defaultValue('full_html');
    $this->addFieldMapping('field_legacy_tags', 'tags')->separator('|')->defaultValue('');;
    $this->addFieldMapping('field_author', 'authors')
      ->separator('|')
      ->sourceMigration('DocumentAuthors');  
  }
  public function prepareRow($row) {
    $this->processTags($row);
    $row->authors = array();
    if($row->authorlast) {
      $row->authors[] = $row->authorfirst.' '.$row->authorlast;
    }
    if($row->author2last) {
      $row->authors[] = $row->author2first.' '.$row->author2last;
    }
    if($row->author3last) {
      $row->authors[] = $row->author3first.' '.$row->author3last;
    }
    if($row->CoAuthorId > 0) {
      $row->authors .= '|'.$row->CoAuthorId;
    }
    return $row;
  }
}


class MisesTagMapper {
  protected $legacytags;
  protected $map1;
  protected $map2;
  protected $db;
  protected $terms;
  protected $articleId;
  public function __construct($row) {
    $this->articleId = $row->ArticleId;
    $this->terms = array('tag' => array(), 'field_topics' => array(), 'field_austrian_school' => array());
    $guid = $row->GUID;
    $this->db = Database::getConnection('default', 'for_migration');
    $this->legacytags = $this->getLegacyTags($guid);
    if($row->DocumentID) {
      $this->legacytags = array_merge($this->legacytags, $this->getLegacySubjects($row->DocumentId));
    }
    $this->processCSV1();
    $this->processMap1();
  }
  public function getTerms() {
    return $this->terms;
  }
  protected function processMap1() {
    static $vocabs;
    if(!$vocabs) {
      $vocabs = array(6 => array(), 7 => array());
      $query = db_query("SELECT name, tid, vid FROM {taxonomy_term_data} WHERE vid IN(6,7)");
      while($result = $query->fetch()) {
        switch($result->vid) {
          case 6:
            $field = 'field_topics';
            break;
          case 7:
            $field = 'field_austrian_school';
            break;
        }
        $vocabs[$field][$result->name] = $result->tid;
      }
    }
    foreach($this->legacytags as $tag) {
      if(isset($this->map1[$tag])) {
        foreach($this->map1[$tag] as $type => $names) {
          foreach($names as $name) {
            if($vocabs[$type][$name]) {
              $this->terms[$type][$vocabs[$type][$name]] = $vocabs[$type][$name];
            }
          }
        }
      }
    }
  }

  protected function getLegacyTags($guid) {
    $tags = array();
    $query = $this->db
      ->query("SELECT t.* FROM {tag} t INNER JOIN {TagMap} m ON t.TagId = m.TagId WHERE m.ObjectId = '$guid' AND m.TaggedBy NOT IN('SearchEngineBot', 'MisesBot')");
    while($result = $query->fetch()) {
      $tags[] = $result->Tag;
    }
    return $tags;
  }

  protected function getLegacySubjects($documentId) {
    $subjects = array();
    $query = $this->db->query("SELECT dsl.Subject 
      FROM documentsubjectlink dsl 
      INNER JOIN documentsubject ds ON ds.SubjectID = dsl.SubjectID
      WHERE dsl.DocumentId = $documentId");
    while($result = $query->fetch()) {
      $subjects[] = $result->SubjectID;
    }
    return $subjects;
  }

  protected function processCSV1() {
    static $rows;
    if(!$rows) {
      $rows = array();
      $url = url(drupal_get_path('module', 'mises_migrate'). '/tagmapping1.csv');
      $contents = file_get_contents('./'.$url);
      $lines = explode("\n", $contents);
      foreach($lines as $line) {
        $row = str_getcsv($line);
        if($row[2] != 'â€”') {
          $mapping = array(
            'field_tags' => array($row[1]),
            'field_topics' => array_map('trim',explode(",",$row[2])),
            'field_austrian_school' => array_map('trim',explode(",", $row[3]))
          );
          $rows[trim($row[1])] = $mapping;
        }
      }
    }
    $this->map1 = $rows;
  }
  protected function processCSV2() {
    $rows = array();
    $url = url(drupal_get_path('module', 'mises_migrate'). '/tagmapping2.csv');
    $contents = file_get_contents('./'.$url);
    $lines = explode("\n", $contents);
    unset($lines[1]);
    unset($lines[2]);
    unset($lines[3]);
    unset($lines[4]);
    foreach($lines as $line) {
      $row = explode(',', $line);
      foreach($row as $k => $v) {
        $row[$k] = trim($v);
      }
      if(!$row[4]) {
        $mapping = new stdClass();
        $mapping->tag = $row[3];
        $rows[$row[6]] = $mapping;
      }
    }
  }
}

class QuotesMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('Quotes', 'q')
      ->fields('q');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'QuoteId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'title');
    $this->addFieldMapping('body', 'Quote');
    $this->addFieldMapping('body:format')->defaultValue('simplified');
    $this->addFieldMapping('field_library_item_tree')->defaultValue(array('Quotes'));
    $this->addFieldMapping('status')->defaultValue(1);
  }
  public function prepareRow($row) {
    $row->title = $row->Source.' '.$row->Page;
  }
  public function prepare($node, $row) {

  }
}

class DailyArticlesMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('dailyarticles', 'd')
      ->fields('d')
      ->orderBy('d.ArticleId', "DESC");
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'ArticleId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'Title');
    $this->addFieldMapping('body', 'ArticleText');
    $this->addFieldMapping('body:summary', 'Description');
    $this->addFieldMapping('body:format')->defaultValue('simplified');
    $this->addFieldMapping('field_published_date', 'DatePosted'); 
    $this->addFieldMapping('field_mises_published_date', 'DatePosted'); 
    $this->addFieldMapping('field_author_1', 'AuthorId')
      ->sourceMigration('DocumentAuthors');  
    $this->addFieldMapping('field_author_2', 'CoAuthorId')
      ->sourceMigration('DocumentAuthors');  
    $this->addFieldMapping('field_library_item_tree')->defaultValue(array('Mises Daily'));
    $this->addFieldMapping('created', 'CreatedDate');
    $this->addFieldMapping('changed', 'EditDate');
    $this->addFieldMapping('status', 'ShowArticle');
    //$this->addFieldMapping('field_austrian_school', 'field_austrian_school');
    //$this->addFieldMapping('field_topics', 'field_topics');
  }
  public function prepareRow($row) {
    $row->ArticleText = $this->cleanBody($row->ArticleText);
    //$this->mapTags($row);
    return $row;
  }
  public function prepare($node, $row) {
    $this->insert_mapping_url($node->nid, $row->ArticleId, 'daily', $node->title);
  }
  private function cleanBody($content) {

    $html = importDOM($content);
    $xpath = new DOMXpath($html);
    $remove = array('//div[@class="figure"]','//div[@class="article-author"]');
    foreach($remove as $r) {
      foreach($xpath->query($r) as $node) {
        $node->parentNode->removeChild($node);
      }
    }
    return exportDOM($html);
  }
}


class DocumentMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('documents', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('library_item');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'DocumentId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'Title');
    $this->addFieldMapping('body', 'Description');
    $this->addFieldMapping('body:format')->defaultValue('simplified');
    $this->addFieldMapping('field_published_date', 'CreateDate'); 
    $this->addFieldMapping('field_mises_published_date', 'CreateDate'); 
    $this->addFieldMapping('field_bibliography_footnote', 'PublicationInformation'); 
    $this->addFieldMapping('field_author_1', 'Author1')
      ->sourceMigration('DocumentAuthors');
    $this->addFieldMapping('field_author_2', 'Author2')
      ->sourceMigration('DocumentAuthors');
    // @todo - assign this
    $this->addFieldMapping('status', 'Display');
    $this->addFieldMapping('field_library_item_tree', 'media_type');
    $this->addFieldMapping('field_austrian_school', 'field_austrian_school');
    $this->addFieldMapping('field_topics', 'field_topics');
    $this->addFieldMapping('uid')->defaultValue(1);
  }

  public function prepareRow($row) {
    $map = $this->convertSubjects($this->getLegacySubjects($row->DocumentId));
    $row->field_topics = $map['field_topics'];
    $row->field_austrian_school = $map['field_austrian_school'];
    $row->media_type = $this->convertMediaType($row->DocumentId);
    return $row;
  }

  public function prepare($node, $row) {
    $this->insert_mapping_url($node->nid, $row->DocumentId, 'document', $node->title);
  }

  protected function convertMediaType($documentId) {
    $types = array();
    $query = $this->db->query("SELECT dmt.MediaType FROM documentmediatype dmt INNER JOIN DocumentFiles df ON df.mediaTypeID = dmt.MediaTypeID WHERE df.DocumentId = $documentId");
    while($result = $query->fetch()) {
      switch($result->MediaType) {
        case 'Web Page (.html,.aspx)':
          $types['Online Texts'] = 'Online Texts';
          break;
        case 'Adobe Acrobat (.pdf)':
        case 'ebook (.epub)':
        case 'Amazon Kindle (.mobi)':
        case 'ebook (.epub)':
        case 'Document (.doc, .rtf, etc.)':
          $types['Books'] = 'Books';
          break;
        case 'Audio (.mp3, .wav, etc.)':
        case 'Windows Media Video (.wmv)':
        case 'YouTube':
        case 'MPEG-4 Video':
          $types['Audio/Video'] = 'Audio/Video';
          break;
        case 'Streaming Video':
          $types['Audio/Video'] = 'Audio/Video';
          $types['Live Video'] = 'Live Video';
          break;
        case 'Audiobook':
          $types['Audio Books'] = 'Audio Books';
          $types['Audio/Video'] = 'Audio/Video';
          break;
      }
    }
    return array_values($types);
  }

  protected function convertSubjects($legacySubjects) {
    static $vocabs;
    static $map;
    if(!$map) {
      $rows = array();
      $url = url(drupal_get_path('module', 'mises_migrate'). '/subjectmap.csv');

      $contents = file_get_contents('./'.$url);

      $lines = explode("\n", $contents);
      foreach($lines as $line) {
        $mapping = array();
        $row = str_getcsv($line);
        if($row[1] != 'â€”') {
          $mapping['field_topics'] = array_map('trim',explode(",", $row[1]));
        }
        if($row[2] != 'â€”') {
          $mapping['field_austrian_school'] = array_map('trim',explode(",", $row[2]));
        }
        $rows[trim($row[0])] = $mapping;
      }
      $map = $rows;
    }
    if(!$vocabs) {
      $vocabs = array(6 => array(), 7 => array());
      $query = db_query("SELECT name, tid, vid FROM {taxonomy_term_data} WHERE vid IN(6,7)");
      while($result = $query->fetch()) {
        switch($result->vid) {
          case 6:
            $field = 'field_topics';
            break;
          case 7:
            $field = 'field_austrian_school';
            break;
        }
        $vocabs[$field][$result->name] = $result->tid;
      }
    }
    foreach($legacySubjects as $tag) {
      if(isset($map[$tag])) {
        foreach($map[$tag] as $type => $names) {
          foreach($names as $name) {
            if($vocabs[$type][$name]) {
              $terms[$type][$vocabs[$type][$name]] = $vocabs[$type][$name];
            }
          }
        }
      }
    }
    return $terms;
  }

  protected function getLegacySubjects($documentId) {
    $subjects = array();
    $query = $this->db->query("SELECT ds.Subject 
      FROM documentsubjectlink dsl 
      INNER JOIN documentsubjects ds ON ds.SubjectID = dsl.SubjectID
      WHERE dsl.DocumentId = $documentId");
    while($result = $query->fetch()) {
      $subjects[] = $result->Subject;
    }
    return $subjects;
  }
}


class CourseMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->db = Database::getConnection('default', 'course');
    $query = $this->db
      ->select('mdl_course', 'p')
      ->fields('p');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('course');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'id' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'fullname');
    $this->addFieldMapping('body', 'summary');
    $this->addFieldMapping('body:format')->defaultValue('full_html');
    $this->addFieldMapping('uid')->defaultValue(1);
    $this->addFieldMapping('status','visible')->defaultValue(1);
  }
}


class ProductMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $this->db = Database::getConnection('default', 'product');
    $query = $this->db
      ->select('agd_temp_products', 'p')
      ->fields('p');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('product');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'productid' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'name');
    $this->addFieldMapping('body', 'description');
    $this->addFieldMapping('body:summary', 'summary');
    $this->addFieldMapping('body:format')->defaultValue('full_html');
    $this->addFieldMapping('uid')->defaultValue(1);
    $this->addFieldMapping('field_link_to_external_listing_', 'ProductURL');
    $this->addFieldMapping('field_image', 'imageurl');
    $this->addFieldMapping('status')->defaultValue(1);
    /*
    $this->addFieldMapping('field_product_image:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_product_image:alt', 'name');
    $this->addFieldMapping('field_product_image:title', 'name');
    */
  }
  public function prepareRow($row) {
    $row->ProductURL = 'http://'.$row->ProductURL;
    $row->imageurl = 'http://store.mises.org'.str_replace("~", '',$row->imageurl);
    return $row;
  }

}


class DocumentAuthorsMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('documentauthors', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationNode('person_profile');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'AuthorId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('title', 'name');
    $this->addFieldMapping('field_first_name', 'AuthorFirst');
    $this->addFieldMapping('field_last_name', 'AuthorLast');
    //$this->addFieldMapping('field_born', 'Born');
    //$this->addFieldMapping('field_died', 'Died');
    $this->addFieldMapping('field_bio_summary', 'BioText');
    $this->addFieldMapping('field_bio_summary:format')->defaultValue('simplified');
    $this->addFieldMapping('body', 'body');
    $this->addFieldMapping('body:format')->defaultValue('simplified');
    $this->addFieldMapping('status')->defaultValue(1);
  }
  public function prepareRow($row) {
    $row->body = '';
    $row->name = $this->getFullName($row);
    return $row;
  }
  public function prepare($node, $row) {
    $this->insert_mapping_url($node->nid, $row->AuthorId, 'Author', $node->title);
  }
}


abstract class MisesImageMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
  }
  public function setFieldMapping($query, $key, $parent_migration, $node_type) {
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationFieldCollection(
      'field_image_collection',
      array('host_entity_type' => 'node')
    );
   // $this->dependencies = array($parent_migration);
    $this->map = new MigrateSQLMap($this->machineName,
      array(
        $key => array(
          'type' => 'int',
          'not null' => true,
        ),
      ),
      MigrateDestinationFieldCollection::getKeySchema()
    );
    $this->addFieldMapping('host_entity_id', $key)->sourceMigration($parent_migration);
    $this->addFieldMapping('field_image', 'image');
    // Indicate that we want each file to maintain its name, replacing any
    // previous file of the same name (as opposed to being renamed to avoid
    // collisions, which is the default).
    $this->addFieldMapping('field_image:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_image:alt', 'alt');
    $this->addFieldMapping('field_image:title', 'alt');
  }
}


class DocumentImageMigration extends MisesImageMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('documents', 'd')
      ->fields('d');
    //$query->where("d.ThumbnailURL IS NOT NULL OR NOT ''");
    $this->source = new MigrateSourceSQL($query);
    $this->setFieldMapping($query, 'DocumentId' ,'Document', 'library_item');
  }
  public function prepareRow($row) {
    if($row->CoverImageURL) {
      $row->alt = $row->Title;
      $row->image = 'http://mises.org'.$row->CoverImageURL;
    }
    return $row;
  }
}


class DailyArticlesImageMigration extends MisesImageMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('dailyarticles', 'd')
      ->fields('d');
    //$query->where("d.ThumbnailURL IS NOT NULL OR NOT ''");
    $this->source = new MigrateSourceSQL($query);
    $this->setFieldMapping($query, 'ArticleId' ,'DailyArticles', 'library_item');
  }
  public function prepareRow($row) {
    $newDom = new DOMDocument();
    @$newDom->loadHTML($row->ArticleText);
    $tag = $newDom->getElementsByTagName('img');
    $images = array();
    foreach($tag as $image) {
      $images[] = $image->getAttribute('src');
    }

    if(strpos($row->ArticleText,'[image]') !== false) {
      $row->image = 'http://images.mises.org/DailyArticleBigImages/'.$row->ArticleId.'.jpg';
    }
    else if(isset($images[0])) {
      $row->image = $images[0];
      // someone smart thinks that '//' is acceptable shorthand for http://
      if(substr($row->image, 0, 2) == '//') {
        $row->image = 'http:'.$row->image;
      }
    }
    return $row;
  }
}


class DocumentAuthorsImageMigration extends MisesImageMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('documentauthors', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->setFieldMapping($query, 'AuthorId' ,'DocumentAuthors', 'person_profile');
  }
  public function prepareRow($row) {
    if($row->Photo) {
      $row->alt = $this->getFullName($row);
      $row->image = $row->Photo;
    }
    return $row;
  }
}


class TagsMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('tag', 't')
      ->fields('t')
      ->distinct('TagId', 't');
      $query->join('TagMap', 'm', 't.TagId=m.TagId');
      $query->where("m.TaggedBy NOT IN('MisesBot', 'SearchEngineBot')");

      $this->source = new MigrateSourceSQL($query);
      $this->destination = new MigrateDestinationTerm('legacy_tags');
      $this->map = new MigrateSQLMap($this->machineName, array(
        'TagId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE, 'alias' => 't')),
        MigrateDestinationNode::getKeySchema()
      );
      $this->addFieldMapping('name', 'Tag');
  }
}


class DocumentMediaTypeMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('DocumentMediaType', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationTerm('legacy_media_type');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'MediaTypeID' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('name', 'MediaType');
    $this->addFieldMapping('field_image', 'image');
    // Indicate that we want each file to maintain its name, replacing any
    // previous file of the same name (as opposed to being renamed to avoid
    // collisions, which is the default).
    $this->addFieldMapping('field_image:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_image:alt', 'Subject');
    $this->addFieldMapping('field_image:title', 'Subject');
  }
  public function prepareRow($row) {
    $row->image = 'http://mises.org'.$row->MediaIconPath;
    return $row;
  }
  public function prepare($row, $node) {

  }
}


class DocumentSubjectsMigration extends MisesMigration {
  public function __construct($arguments) {
    parent::__construct($arguments);
    $query = $this->db
      ->select('documentsubjects', 'd')
      ->fields('d');
    $this->source = new MigrateSourceSQL($query);
    $this->destination = new MigrateDestinationTerm('subject');
    $this->map = new MigrateSQLMap($this->machineName, array(
      'SubjectId' => array('type' => 'int','unsigned' => TRUE,'not null' => TRUE)),
      MigrateDestinationNode::getKeySchema()
    );
    $this->addFieldMapping('name', 'Subject');
    $this->addFieldMapping('field_short_name', 'ShortSubject');
    $this->addFieldMapping('field_subject_image', 'image');
    // Indicate that we want each file to maintain its name, replacing any
    // previous file of the same name (as opposed to being renamed to avoid
    // collisions, which is the default).
    $this->addFieldMapping('field_subject_image:file_replace')
         ->defaultValue(FILE_EXISTS_REPLACE);
    $this->addFieldMapping('field_subject_image:alt', 'Subject');
    $this->addFieldMapping('field_subject_image:title', 'Subject');
  }
  public function prepareRow($row) {
    $row->image = 'http://mises.org'.$row->Photo;
    return $row;
  }
  public function prepare($row, $node) {

  }
}


